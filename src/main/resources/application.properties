spring.application.name=VibeList
spring.config.import=optional:file:.env[.properties]

spring.profiles.active=${PROFILE:dev}
#spring.config.import=optional:classpath:application-secret.properties

# Server Port \uC124\uC815
#server.port=${SERVER_PORT:8081}


# Database \uC124\uC815
db.server=${DB_SERVER:localhost}
db.port=${DB_PORT:5432}
db.name=${DB_NAME:vibelist}
db.username=${DB_USERNAME:postgres}
db.password=${DB_PASSWORD:1234}

# PostgreSQL \uC124\uC815
spring.datasource.url=jdbc:postgresql://${db.server}:${db.port}/${db.name}
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=${db.username}
spring.datasource.password=${db.password}
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.globally_quoted_identifiers=true

# JWT \uC124\uC815
jwt.secret=ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY
jwt.access-token-validity=1800000
jwt.refresh-token-validity=604800000

# OAuth2 \uC124\uC815
# Google
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# Kakao
oauth2.kakao.client-id=${KAKAO_CLIENT_ID}
oauth2.kakao.logout-redirect-uri=${frontend.logout.url}
spring.security.oauth2.client.registration.kakao.client-id=${oauth2.kakao.client-id}
spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# spotify
# =======================================
# Spotify OAuth2 Client Registration
# =======================================
spring.security.oauth2.client.registration.spotify.client-id=${SPOTIFY_CLIENT_ID}
spring.security.oauth2.client.registration.spotify.client-secret=${SPOTIFY_CLIENT_SECRET}
spring.security.oauth2.client.registration.spotify.client-name=spotify
spring.security.oauth2.client.registration.spotify.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spotify.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.spotify.redirect-uri=http://127.0.0.1:8080/callback
spring.security.oauth2.client.registration.spotify.scope=user-read-email,user-read-private,streaming,playlist-modify-private,playlist-read-private,playlist-modify-public,user-library-modify,user-library-read
# Refresh Token\uC744 \uBC1B\uAE30 \uC704\uD55C \uCD94\uAC00 \uC124\uC815
spring.security.oauth2.client.registration.spotify.client-authentication-method=client_secret_post

# =======================================
# Spotify OAuth2 Provider Details
# =======================================
spring.security.oauth2.client.provider.spotify.authorization-uri=https://accounts.spotify.com/authorize
spring.security.oauth2.client.provider.spotify.token-uri=https://accounts.spotify.com/api/token
spring.security.oauth2.client.provider.spotify.user-info-uri=https://api.spotify.com/v1/me
spring.security.oauth2.client.provider.spotify.user-name-attribute=id

# =======================================
# Spotfiy Api \uD638\uCD9C\uC744 \uC704\uD55C key
# =======================================
#spotify.clientId = ${SPOTIFY_CLIENT_ID}
#spotify.clientSecret=${SPOTIFY_CLIENT_SECRET}
#spotify.redirectUri = ${SPOTIFY_REDIRECTURI}
# =======================================
# Swagger/OpenAPI Documentation Settings
# =======================================
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.packages-to-scan=org.example.vibelist
springdoc.paths-to-match=/v1/**,/health
springdoc.show-actuator=false

# =======================================
# Google Gemini API
# =======================================
llm.gemini.api-key=${GEMINI_API_KEY}
llm.gemini.url=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent

#ElasticSearch
spring.elasticsearch.uris=http://${ES_HOST:localhost}:9200

# emotion_profiles.json \uD30C\uC77C \uACBD\uB85C / \uB85C\uCEEC
emotion.profile.path=${EMOTION_PROFILE_PATH:config/emotion/emotion_profiles.json}

server.forward-headers-strategy=NATIVE


#logstash \uC124\uC815 \uD30C\uC77C
logging.config=classpath:logback-spring.xml


#s3 \uC124\uC815
cloud.aws.stack.auto=false
cloud.aws.region.static=ap-northeast-2
cloud.aws.credentials.accessKey=${S3_ACCESS_KEY}
cloud.aws.credentials.secretKey=${S3_SECRET_KEY}

# Frontend
frontend.url=${FRONTEND_URL}
frontend.login.url=${FRONTEND_LOGIN_URL}
frontend.logout.url=${FRONTEND_LOGOUT_URL}
frontend.callback.url=${FRONTEND_CALLBACK_URL}

# Thymeleaf settings
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=false
